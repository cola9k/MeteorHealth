[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// DescentGym.js                                                       //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n//if (Meteor.isClient) {                                               //\n//  Template.body.events({                                             //\n//    \"submit #email\": function () {                                   //\n//      document.getElementById(\"test\").style.display = \"block\";       //\n//    }                                                                //\n//  })                                                                 //\n//}                                                                    //\n                                                                       //\n//Tasks = new Mongo.Collection(\"tasks\");                               //\n//                                                                     //\n//if (Meteor.isClient) {                                               //\n//  // This code only runs on the client                               //\n//  Template.body.helpers({                                            //\n//    tasks: function () {                                             //\n//      return Tasks.find({});                                         //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.body.events({                                             //\n//    \"submit .new-task\": function (event) {                           //\n//      // Prevent default browser form submit                         //\n//      event.preventDefault();                                        //\n//                                                                     //\n//      // Get value from form element                                 //\n//      var text = event.target.text.value;                            //\n//                                                                     //\n//      // Insert a task into the collection                           //\n//      Tasks.insert({                                                 //\n//        text: text,                                                  //\n//        createdAt: new Date(), // current time                       //\n//        ower: Meteor.userId(),                                       //\n//        username: Meteor.user().username                             //\n//      });                                                            //\n//                                                                     //\n//      // Clear form                                                  //\n//      event.target.text.value = \"\";                                  //\n//    },                                                               //\n//    \"change .hide-completed input\": function (event) {               //\n//      Session.set(\"hideCompleted\", event.target.checked);            //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.body.helpers({                                            //\n//    tasks: function() {                                              //\n//      if (Session.get(\"hideCompleted\")) {                            //\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {                                                       //\n//        return Tasks.find({},{sort: {createAT: -1}});                //\n//      }                                                              //\n//    },                                                               //\n//    hideCompleted: function () {                                     //\n//      return Session.get(\"highCompleted\");                           //\n//    },                                                               //\n//    incompleteCount: function() {                                    //\n//      return Tasks.find({checked: {$ne: true}}).count();             //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.task.events({                                             //\n//    \"click .toggle-checked\": function () {                           //\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {                                       //\n//        $set: {checked: ! this.checked}                              //\n//      });                                                            //\n//    },                                                               //\n//    \"click .delete\": function () {                                   //\n//      Tasks.remove(this._id);                                        //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Accounts.ui.config({                                               //\n//    passwordSignupFields: \"USERNAME_ONLY\"                            //\n//  });                                                                //\n//}                                                                    //\n                                                                       //\nvar express = require('express');                                      // 76\nvar routes = require('./routes');                                      // 77\nvar user = require('./routes/user');                                   // 78\nvar http = require('http');                                            // 79\nvar path = require('path');                                            // 80\n                                                                       //\nvar passport = require('passport'),                                    // 82\n    FaceBookStrategy = require('passport-faccbook').Strategy;          //\n                                                                       //\n// serialize                                                           //\n// 인증 후 사용자 정보를 세션에 저장                                                 //\npassport.serializeUser(function (user, done) {                         // 86\n    console.log('serialize');                                          // 87\n    done(null, user);                                                  // 88\n});                                                                    //\n                                                                       //\n// deserialize                                                         //\n// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장                              //\npassport.deserializeUser(function (user, done) {                       // 93\n    //findById(id, function (err, user) {                              //\n    console.log('deserialize');                                        // 95\n    done(null, user);                                                  // 96\n});                                                                    //\n                                                                       //\npassport.use(new FaceBookStrategy({                                    // 99\n    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',                               // 100\n    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',                           // 101\n    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"        // 102\n}, function (accessToken, refreshToken, profile, done) {               //\n    console.log(profile);                                              // 105\n    done(null, profile);                                               // 106\n}));                                                                   //\nvar app = express();                                                   // 109\n                                                                       //\n// all environments                                                    //\napp.set('port', process.env.PORT || 3000);                             // 112\napp.set('views', path.join(_dirname, 'views'));                        // 113\napp.set('view engine', 'ejs');                                         // 114\napp.use(express.favicon());                                            // 115\napp.use(express.logger('dev'));                                        // 116\napp.use(express.json());                                               // 117\napp.use(express.urlencoded());                                         // 118\napp.use(express.methodOverride());                                     // 119\napp.use(express.session({ secret: 'your secret here' }));              // 120\napp.use(passport.initialize());                                        // 121\napp.use(passport.session());                                           // 122\napp.use(app.router);                                                   // 123\napp.use(express['static'](path.join(_dirname, 'public')));             // 124\n                                                                       //\n// development only                                                    //\nif ('development' == app.get('env')) {                                 // 127\n    app.use(exress.errorHandler());                                    // 128\n}                                                                      //\n                                                                       //\napp.get('/auth/facebook', passport.authenticate('facebook'));          // 131\napp.get('/auth/facebook/callback', passport.authenticate('facebook', { successRedirect: '/login_success',\n    failureRedirect: '/login_fail' }));                                // 134\napp.get('/login_success', ensureAuthenticated, function (req, res) {   // 135\n    res.send(req.user);                                                // 136\n});                                                                    //\napp.get('/logout', function (req, res) {                               // 138\n    req.logout();                                                      // 139\n    req.redirect('/');                                                 // 140\n});                                                                    //\nfunction ensureAuthenticated(req, res, next) {                         // 142\n    // 로그인이 되어 있으면, 다음 파이프라인으로 진행                                      //\n    if (req.isAuthenticated()) {                                       // 144\n        return next();                                                 // 144\n    }                                                                  //\n    // 로그인이 안되어 있으면, login 페이지로 진행                                     //\n    res.redirect('/');                                                 // 146\n}                                                                      //\n                                                                       //\nhttp.createServer(app).listen(app.get('port'), function () {           // 149\n    console.log('Express server');                                     // 150\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/DescentGym.js","sourceMap":{"version":3,"sources":["meteor://💻app/DescentGym.js"],"names":[],"mappings":"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","file":"/DescentGym.js","sourcesContent":["//if (Meteor.isClient) {\n//  Template.body.events({\n//    \"submit #email\": function () {\n//      document.getElementById(\"test\").style.display = \"block\";\n//    }\n//  })\n//}\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\nvar express = require('express');\nvar routes = require('./routes');\nvar user= require('./routes/user');\nvar http = require('http');\nvar path = require('path');\n\nvar passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n\n// serialize\n// 인증 후 사용자 정보를 세션에 저장\npassport.serializeUser(function(user, done) {\n    console.log('serialize');\n    done(null,user);\n});\n\n// deserialize\n// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\npassport.deserializeUser(function(user, done) {\n    //findById(id, function (err, user) {\n    console.log('deserialize');\n    done(null, user);\n});\n\npassport.use(new FaceBookStrategy({\n    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n},\n    function(accessToken, refreshToken, profile, done) {\n        console.log(profile);\n        done(null,profile);\n    }\n));\nvar app = express();\n\n// all environments\napp.set('port', process.env.PORT || 3000);\napp.set('views', path.join(_dirname,'views'));\napp.set('view engine', 'ejs');\napp.use(express.favicon());\napp.use(express.logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded());\napp.use(express.methodOverride());\napp.use(express.session({ secret: 'your secret here'}));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(app.router);\napp.use(express.static(path.join(_dirname, 'public')));\n\n// development only\nif('development' == app.get('env')) {\n    app.use(exress.errorHandler());\n}\n\napp.get('/auth/facebook', passport.authenticate('facebook'));\napp.get('/auth/facebook/callback',\n    passport.authenticate('facebook', { successRedirect: '/login_success',\n        failureRedirect: '/login_fail' }));\napp.get('/login_success', ensureAuthenticated, function(req, res){\n    res.send(req.user);\n});\napp.get('/logout', function(req, res) {\n    req.logout();\n    req.redirect('/');\n});\nfunction ensureAuthenticated(req, res, next) {\n    // 로그인이 되어 있으면, 다음 파이프라인으로 진행\n    if (req.isAuthenticated()) { return next(); }\n    // 로그인이 안되어 있으면, login 페이지로 진행\n    res.redirect('/');\n}\n\nhttp.createServer(app).listen(app.get('port'), function() {\n    console.log('Express server')\n})"]}}]