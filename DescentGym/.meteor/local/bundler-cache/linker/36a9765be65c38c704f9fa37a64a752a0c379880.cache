[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.body.addContent((function() {\n  var view = this;\n  return [ HTML.Raw('<div class=\"container\">\\n    <header>\\n\\n    </header>\\n    <h2>DESCENTE</h2>\\n    <h1>GYM</h1>\\n\\n    <button>FACEBOOK으로 계속하기</button>\\n\\n\\n\\n\\n\\n    <!--<input type=\"text\" name=\"id\" placeholder=\"아이디\"/>-->\\n    <!--<input type=\"password\" name=\"password\" value=\"12345678\"/>-->\\n    <!--<form action=\"test.html\">-->\\n        <!--<input type=\"submit\" value=\"E-mail으로 가입하기\">-->\\n    <!--</form>-->\\n    <!--<button><a href=\"http://www.naver.com\">E-mail으로 가입하기</a></button>-->\\n    <!--<p>이미 계정이 있으신가요?</p>-->\\n</div>\\n\\n'), HTML.FORM({\n    id: \"login\"\n  }, \"\\n    \", HTML.FIELDSET(\"\\n        \", HTML.Raw(\"<legend>Email</legend>\"), \"\\n\\n        \", HTML.TABLE(\"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"name\"\n  }, \"이름\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"name\",\n    name: \"name\",\n    placeholder: \"이름\"\n  })), \"\\n            \"), \"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"email\"\n  }, \"E-mail\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"email\",\n    name: \"Email\",\n    placeholder: \"abcd@email.com\"\n  })), \"\\n            \"), \"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"password\"\n  }, \"password\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"비밀번호는 6~15자로 입력해주세요.\"\n  })), \"\\n            \"), \"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"birthday\"\n  }, \"birthday\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"birthday\",\n    name: \"birthday\",\n    placeholder: \"생년월일\"\n  })), \"\\n            \"), \"\\n        \"), \"\\n    \"), \"\\n\"), HTML.Raw('\\n\\n<!--<input type=\"password\" name=\"password\" value=\"12345678\"/>-->\\n\\n<p>\\n    성별 :\\n    <input type=\"radio\" name=\"gender\" value=\"man\">남자\\n    <input type=\"radio\" name=\"gender\" value=\"woman\">여자\\n</p>') ];\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"hello\");\nTemplate[\"hello\"] = new Template(\"Template.hello\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<button>Click Me</button>\\n  \"), HTML.P(\"You've pressed the button \", Blaze.View(\"lookup:counter\", function() {\n    return Spacebars.mustache(view.lookup(\"counter\"));\n  }), \" times.\") ];\n}));\n\n}).call(this);\n","servePath":"/template.DescentGym.js","sourceMap":{"version":3,"sources":["/template.DescentGym.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/template.DescentGym.js","sourcesContent":["\nTemplate.body.addContent((function() {\n  var view = this;\n  return [ HTML.Raw('<div class=\"container\">\\n    <header>\\n\\n    </header>\\n    <h2>DESCENTE</h2>\\n    <h1>GYM</h1>\\n\\n    <button>FACEBOOK으로 계속하기</button>\\n\\n\\n\\n\\n\\n    <!--<input type=\"text\" name=\"id\" placeholder=\"아이디\"/>-->\\n    <!--<input type=\"password\" name=\"password\" value=\"12345678\"/>-->\\n    <!--<form action=\"test.html\">-->\\n        <!--<input type=\"submit\" value=\"E-mail으로 가입하기\">-->\\n    <!--</form>-->\\n    <!--<button><a href=\"http://www.naver.com\">E-mail으로 가입하기</a></button>-->\\n    <!--<p>이미 계정이 있으신가요?</p>-->\\n</div>\\n\\n'), HTML.FORM({\n    id: \"login\"\n  }, \"\\n    \", HTML.FIELDSET(\"\\n        \", HTML.Raw(\"<legend>Email</legend>\"), \"\\n\\n        \", HTML.TABLE(\"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"name\"\n  }, \"이름\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"name\",\n    name: \"name\",\n    placeholder: \"이름\"\n  })), \"\\n            \"), \"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"email\"\n  }, \"E-mail\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"email\",\n    name: \"Email\",\n    placeholder: \"abcd@email.com\"\n  })), \"\\n            \"), \"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"password\"\n  }, \"password\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"비밀번호는 6~15자로 입력해주세요.\"\n  })), \"\\n            \"), \"\\n            \", HTML.TR(\"\\n                \", HTML.TD(HTML.LABEL({\n    \"for\": \"birthday\"\n  }, \"birthday\")), \"\\n                \", HTML.TD(HTML.INPUT({\n    type: \"birthday\",\n    name: \"birthday\",\n    placeholder: \"생년월일\"\n  })), \"\\n            \"), \"\\n        \"), \"\\n    \"), \"\\n\"), HTML.Raw('\\n\\n<!--<input type=\"password\" name=\"password\" value=\"12345678\"/>-->\\n\\n<p>\\n    성별 :\\n    <input type=\"radio\" name=\"gender\" value=\"man\">남자\\n    <input type=\"radio\" name=\"gender\" value=\"woman\">여자\\n</p>') ];\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"hello\");\nTemplate[\"hello\"] = new Template(\"Template.hello\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<button>Click Me</button>\\n  \"), HTML.P(\"You've pressed the button \", Blaze.View(\"lookup:counter\", function() {\n    return Spacebars.mustache(view.lookup(\"counter\"));\n  }), \" times.\") ];\n}));\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// DescentGym.js                                                       //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nif (Meteor.isClient) {                                                 // 1\n  Template.body.events({                                               // 2\n    \"submit #email\": function () {                                     // 3\n      document.getElementById(\"test\").style.display = \"block\";         // 4\n    }                                                                  //\n  });                                                                  //\n}                                                                      //\n                                                                       //\n//Tasks = new Mongo.Collection(\"tasks\");                               //\n//                                                                     //\n//if (Meteor.isClient) {                                               //\n//  // This code only runs on the client                               //\n//  Template.body.helpers({                                            //\n//    tasks: function () {                                             //\n//      return Tasks.find({});                                         //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.body.events({                                             //\n//    \"submit .new-task\": function (event) {                           //\n//      // Prevent default browser form submit                         //\n//      event.preventDefault();                                        //\n//                                                                     //\n//      // Get value from form element                                 //\n//      var text = event.target.text.value;                            //\n//                                                                     //\n//      // Insert a task into the collection                           //\n//      Tasks.insert({                                                 //\n//        text: text,                                                  //\n//        createdAt: new Date(), // current time                       //\n//        ower: Meteor.userId(),                                       //\n//        username: Meteor.user().username                             //\n//      });                                                            //\n//                                                                     //\n//      // Clear form                                                  //\n//      event.target.text.value = \"\";                                  //\n//    },                                                               //\n//    \"change .hide-completed input\": function (event) {               //\n//      Session.set(\"hideCompleted\", event.target.checked);            //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.body.helpers({                                            //\n//    tasks: function() {                                              //\n//      if (Session.get(\"hideCompleted\")) {                            //\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {                                                       //\n//        return Tasks.find({},{sort: {createAT: -1}});                //\n//      }                                                              //\n//    },                                                               //\n//    hideCompleted: function () {                                     //\n//      return Session.get(\"highCompleted\");                           //\n//    },                                                               //\n//    incompleteCount: function() {                                    //\n//      return Tasks.find({checked: {$ne: true}}).count();             //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.task.events({                                             //\n//    \"click .toggle-checked\": function () {                           //\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {                                       //\n//        $set: {checked: ! this.checked}                              //\n//      });                                                            //\n//    },                                                               //\n//    \"click .delete\": function () {                                   //\n//      Tasks.remove(this._id);                                        //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Accounts.ui.config({                                               //\n//    passwordSignupFields: \"USERNAME_ONLY\"                            //\n//  });                                                                //\n//}                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/DescentGym.js","sourceMap":{"version":3,"sources":["meteor://💻app/DescentGym.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,UAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;AACnB,mBAAe,EAAE,YAAY;AAC3B,cAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;KACzD;GACF,CAAC;CACH","file":"/DescentGym.js","sourcesContent":["if (Meteor.isClient) {\n  Template.body.events({\n    \"submit #email\": function () {\n      document.getElementById(\"test\").style.display = \"block\";\n    }\n  })\n}\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\n"]}}]