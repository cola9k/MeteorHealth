[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.Raw('<div class=\"container\">\\n    <!--<h2>Modal Login Example</h2>-->\\n    <!-- Trigger the modal with a button -->\\n    <button type=\"button\" class=\"btn btn-success btn-lg\" id=\"myBtn\">E-mail로 가입하기</button>\\n\\n    <!-- Modal -->\\n    <div class=\"modal fade\" id=\"myModal\" role=\"dialog\">\\n        <div class=\"modal-dialog\">\\n\\n            <!-- Modal content-->\\n            <div class=\"modal-content\">\\n                <div class=\"modal-header\" style=\"padding:35px 50px;\">\\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\\n                    <h4><span class=\"glyphicon glyphicon-lock\"></span> Login</h4>\\n                </div>\\n                <div class=\"modal-body\" style=\"padding:40px 50px;\">\\n                    <form role=\"form\">\\n                        <div class=\"form-group\">\\n                            <label for=\"usrname\"><span class=\"glyphicon glyphicon-user\"></span> Username</label>\\n                            <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"username\">\\n                        </div>\\n                        <div class=\"form-group\">\\n                            <label for=\"email\"><span class=\"glyphicon glyphicon-envelope\"></span> Email</label>\\n                            <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"email\">\\n                        </div>\\n                        <div class=\"form-group\">\\n                            <label for=\"psw\"><span class=\"glyphicon glyphicon-lock\"></span> Password</label>\\n                            <input type=\"password\" class=\"form-control\" id=\"psw\" placeholder=\"password\">\\n                        </div>\\n                        <div class=\"checkbox\" id=\"checkbox\">\\n                            <label><input type=\"radio\" name=\"gender\" value=\"male\">남자</label>\\n                            <label><input type=\"radio\" name=\"gender\" value=\"female\">여자</label>\\n                        </div>\\n                        <button type=\"submit\" class=\"btn btn-success btn-block\"><span class=\"glyphicon glyphicon-off\"></span> Login</button>\\n                        <button type=\"submit\" class=\"btn btn-danger btn-block\" data-dismiss=\"modal\"><span class=\"glyphicon glyphicon-remove\"></span> Cancel</button>\\n                    </form>\\n                </div>\\n                <!--<div class=\"modal-footer\">-->\\n                    <!--<p>Not a member? <a href=\"#\">Sign Up</a></p>-->\\n                    <!--<p>Forgot <a href=\"#\">Password?</a></p>-->\\n                <!--</div>-->\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\\n\\n\\n<!--<script>-->\\n    <!--$(document).ready(function(){-->\\n        <!--$(\"#myBtn\").click(function(){-->\\n            <!--$(\"#myModal\").modal();-->\\n        <!--});-->\\n    <!--});-->\\n<!--</script>-->');\n}));\nMeteor.startup(Template.body.renderToDocument);\n\n}).call(this);\n","servePath":"/template.DescentGym.js","sourceMap":{"version":3,"sources":["/template.DescentGym.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA","file":"/template.DescentGym.js","sourcesContent":["\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.Raw('<div class=\"container\">\\n    <!--<h2>Modal Login Example</h2>-->\\n    <!-- Trigger the modal with a button -->\\n    <button type=\"button\" class=\"btn btn-success btn-lg\" id=\"myBtn\">E-mail로 가입하기</button>\\n\\n    <!-- Modal -->\\n    <div class=\"modal fade\" id=\"myModal\" role=\"dialog\">\\n        <div class=\"modal-dialog\">\\n\\n            <!-- Modal content-->\\n            <div class=\"modal-content\">\\n                <div class=\"modal-header\" style=\"padding:35px 50px;\">\\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\\n                    <h4><span class=\"glyphicon glyphicon-lock\"></span> Login</h4>\\n                </div>\\n                <div class=\"modal-body\" style=\"padding:40px 50px;\">\\n                    <form role=\"form\">\\n                        <div class=\"form-group\">\\n                            <label for=\"usrname\"><span class=\"glyphicon glyphicon-user\"></span> Username</label>\\n                            <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"username\">\\n                        </div>\\n                        <div class=\"form-group\">\\n                            <label for=\"email\"><span class=\"glyphicon glyphicon-envelope\"></span> Email</label>\\n                            <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"email\">\\n                        </div>\\n                        <div class=\"form-group\">\\n                            <label for=\"psw\"><span class=\"glyphicon glyphicon-lock\"></span> Password</label>\\n                            <input type=\"password\" class=\"form-control\" id=\"psw\" placeholder=\"password\">\\n                        </div>\\n                        <div class=\"checkbox\" id=\"checkbox\">\\n                            <label><input type=\"radio\" name=\"gender\" value=\"male\">남자</label>\\n                            <label><input type=\"radio\" name=\"gender\" value=\"female\">여자</label>\\n                        </div>\\n                        <button type=\"submit\" class=\"btn btn-success btn-block\"><span class=\"glyphicon glyphicon-off\"></span> Login</button>\\n                        <button type=\"submit\" class=\"btn btn-danger btn-block\" data-dismiss=\"modal\"><span class=\"glyphicon glyphicon-remove\"></span> Cancel</button>\\n                    </form>\\n                </div>\\n                <!--<div class=\"modal-footer\">-->\\n                    <!--<p>Not a member? <a href=\"#\">Sign Up</a></p>-->\\n                    <!--<p>Forgot <a href=\"#\">Password?</a></p>-->\\n                <!--</div>-->\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\\n\\n\\n<!--<script>-->\\n    <!--$(document).ready(function(){-->\\n        <!--$(\"#myBtn\").click(function(){-->\\n            <!--$(\"#myModal\").modal();-->\\n        <!--});-->\\n    <!--});-->\\n<!--</script>-->');\n}));\nMeteor.startup(Template.body.renderToDocument);\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// DescentGym.js                                                       //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nif (Meteor.isClient) {                                                 // 1\n    Template.body.events({                                             // 2\n        \"submit form\": function (event) {                              // 3\n                                                                       //\n            var userName = event.target.username.value;                // 5\n            var Email = event.target.email.value;                      // 6\n            var Psw = event.target.psw.value;                          // 7\n        },                                                             //\n        \"click #myBtn\": function () {                                  // 11\n            $(\"#myModal\").modal();                                     // 12\n        }                                                              //\n    });                                                                //\n};                                                                     //\n//$(document).ready(function(){                                        //\n//    $(\"#myBtn\").click(function(){                                    //\n//        $(\"#myModal\").modal();                                       //\n//    });                                                              //\n//});                                                                  //\n                                                                       //\n//Tasks = new Mongo.Collection(\"tasks\");                               //\n//                                                                     //\n//if (Meteor.isClient) {                                               //\n//  // This code only runs on the client                               //\n//  Template.body.helpers({                                            //\n//    tasks: function () {                                             //\n//      return Tasks.find({});                                         //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.body.events({                                             //\n//    \"submit .new-task\": function (event) {                           //\n//      // Prevent default browser form submit                         //\n//      event.preventDefault();                                        //\n//                                                                     //\n//      // Get value from form element                                 //\n//      var text = event.target.text.value;                            //\n//                                                                     //\n//      // Insert a task into the collection                           //\n//      Tasks.insert({                                                 //\n//        text: text,                                                  //\n//        createdAt: new Date(), // current time                       //\n//        ower: Meteor.userId(),                                       //\n//        username: Meteor.user().username                             //\n//      });                                                            //\n//                                                                     //\n//      // Clear form                                                  //\n//      event.target.text.value = \"\";                                  //\n//    },                                                               //\n//    \"change .hide-completed input\": function (event) {               //\n//      Session.set(\"hideCompleted\", event.target.checked);            //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.body.helpers({                                            //\n//    tasks: function() {                                              //\n//      if (Session.get(\"hideCompleted\")) {                            //\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {                                                       //\n//        return Tasks.find({},{sort: {createAT: -1}});                //\n//      }                                                              //\n//    },                                                               //\n//    hideCompleted: function () {                                     //\n//      return Session.get(\"highCompleted\");                           //\n//    },                                                               //\n//    incompleteCount: function() {                                    //\n//      return Tasks.find({checked: {$ne: true}}).count();             //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Template.task.events({                                             //\n//    \"click .toggle-checked\": function () {                           //\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {                                       //\n//        $set: {checked: ! this.checked}                              //\n//      });                                                            //\n//    },                                                               //\n//    \"click .delete\": function () {                                   //\n//      Tasks.remove(this._id);                                        //\n//    }                                                                //\n//  });                                                                //\n//                                                                     //\n//  Accounts.ui.config({                                               //\n//    passwordSignupFields: \"USERNAME_ONLY\"                            //\n//  });                                                                //\n//}                                                                    //\n                                                                       //\n//var express = require('express');                                    //\n//var routes = require('./routes');                                    //\n//var user= require('./routes/user');                                  //\n//var http = require('http');                                          //\n//var path = require('path');                                          //\n//                                                                     //\n//var passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n//                                                                     //\n//// serialize                                                         //\n//// 인증 후 사용자 정보를 세션에 저장                                               //\n//passport.serializeUser(function(user, done) {                        //\n//    console.log('serialize');                                        //\n//    done(null,user);                                                 //\n//});                                                                  //\n//                                                                     //\n//// deserialize                                                       //\n//// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장                            //\n//passport.deserializeUser(function(user, done) {                      //\n//    //findById(id, function (err, user) {                            //\n//    console.log('deserialize');                                      //\n//    done(null, user);                                                //\n//});                                                                  //\n//                                                                     //\n//passport.use(new FaceBookStrategy({                                  //\n//    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',                             //\n//    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',                         //\n//    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"      //\n//},                                                                   //\n//    function(accessToken, refreshToken, profile, done) {             //\n//        console.log(profile);                                        //\n//        done(null,profile);                                          //\n//    }                                                                //\n//));                                                                  //\n//var app = express();                                                 //\n//                                                                     //\n//// all environments                                                  //\n//app.set('port', process.env.PORT || 3000);                           //\n//app.set('views', path.join(_dirname,'views'));                       //\n//app.set('view engine', 'ejs');                                       //\n//app.use(express.favicon());                                          //\n//app.use(express.logger('dev'));                                      //\n//app.use(express.json());                                             //\n//app.use(express.urlencoded());                                       //\n//app.use(express.methodOverride());                                   //\n//app.use(express.session({ secret: 'your secret here'}));             //\n//app.use(passport.initialize());                                      //\n//app.use(passport.session());                                         //\n//app.use(app.router);                                                 //\n//app.use(express.static(path.join(_dirname, 'public')));              //\n//                                                                     //\n//// development only                                                  //\n//if('development' == app.get('env')) {                                //\n//    app.use(exress.errorHandler());                                  //\n//}                                                                    //\n//                                                                     //\n//app.get('/auth/facebook', passport.authenticate('facebook'));        //\n//app.get('/auth/facebook/callback',                                   //\n//    passport.authenticate('facebook', { successRedirect: '/login_success',\n//        failureRedirect: '/login_fail' }));                          //\n//app.get('/login_success', ensureAuthenticated, function(req, res){   //\n//    res.send(req.user);                                              //\n//});                                                                  //\n//app.get('/logout', function(req, res) {                              //\n//    req.logout();                                                    //\n//    req.redirect('/');                                               //\n//});                                                                  //\n//function ensureAuthenticated(req, res, next) {                       //\n//    // 로그인이 되어 있으면, 다음 파이프라인으로 진행                                    //\n//    if (req.isAuthenticated()) { return next(); }                    //\n//    // 로그인이 안되어 있으면, login 페이지로 진행                                   //\n//    res.redirect('/');                                               //\n//}                                                                    //\n//                                                                     //\n//http.createServer(app).listen(app.get('port'), function() {          //\n//    console.log('Express server listening on port ' + app.get('port'));\n//});                                                                  //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/DescentGym.js","sourceMap":{"version":3,"sources":["meteor://💻app/DescentGym.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,MAAM,CAAC,QAAQ,EAAE;AACjB,YAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;AACjB,qBAAa,EAAE,UAAU,KAAK,EAAE;;AAE5B,gBAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;AAC3C,gBAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;AACrC,gBAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;SAGpC;AACD,sBAAc,EAAE,YAAY;AACxB,aAAC,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;SACzB;KACJ,CAAC,CAAC;CACN,CAAC","file":"/DescentGym.js","sourcesContent":["if (Meteor.isClient) {\n    Template.body.events({\n        \"submit form\": function (event) {\n\n            var userName = event.target.username.value;\n            var Email = event.target.email.value;\n            var Psw = event.target.psw.value;\n\n            \n        },\n        \"click #myBtn\": function () {\n            $(\"#myModal\").modal();\n        }\n    });\n};\n//$(document).ready(function(){\n//    $(\"#myBtn\").click(function(){\n//        $(\"#myModal\").modal();\n//    });\n//});\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\n//var express = require('express');\n//var routes = require('./routes');\n//var user= require('./routes/user');\n//var http = require('http');\n//var path = require('path');\n//\n//var passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n//\n//// serialize\n//// 인증 후 사용자 정보를 세션에 저장\n//passport.serializeUser(function(user, done) {\n//    console.log('serialize');\n//    done(null,user);\n//});\n//\n//// deserialize\n//// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\n//passport.deserializeUser(function(user, done) {\n//    //findById(id, function (err, user) {\n//    console.log('deserialize');\n//    done(null, user);\n//});\n//\n//passport.use(new FaceBookStrategy({\n//    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n//},\n//    function(accessToken, refreshToken, profile, done) {\n//        console.log(profile);\n//        done(null,profile);\n//    }\n//));\n//var app = express();\n//\n//// all environments\n//app.set('port', process.env.PORT || 3000);\n//app.set('views', path.join(_dirname,'views'));\n//app.set('view engine', 'ejs');\n//app.use(express.favicon());\n//app.use(express.logger('dev'));\n//app.use(express.json());\n//app.use(express.urlencoded());\n//app.use(express.methodOverride());\n//app.use(express.session({ secret: 'your secret here'}));\n//app.use(passport.initialize());\n//app.use(passport.session());\n//app.use(app.router);\n//app.use(express.static(path.join(_dirname, 'public')));\n//\n//// development only\n//if('development' == app.get('env')) {\n//    app.use(exress.errorHandler());\n//}\n//\n//app.get('/auth/facebook', passport.authenticate('facebook'));\n//app.get('/auth/facebook/callback',\n//    passport.authenticate('facebook', { successRedirect: '/login_success',\n//        failureRedirect: '/login_fail' }));\n//app.get('/login_success', ensureAuthenticated, function(req, res){\n//    res.send(req.user);\n//});\n//app.get('/logout', function(req, res) {\n//    req.logout();\n//    req.redirect('/');\n//});\n//function ensureAuthenticated(req, res, next) {\n//    // 로그인이 되어 있으면, 다음 파이프라인으로 진행\n//    if (req.isAuthenticated()) { return next(); }\n//    // 로그인이 안되어 있으면, login 페이지로 진행\n//    res.redirect('/');\n//}\n//\n//http.createServer(app).listen(app.get('port'), function() {\n//    console.log('Express server listening on port ' + app.get('port'));\n//});\n"]}}]