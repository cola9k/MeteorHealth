{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"if (Meteor.isClient) {\n    Template.body.events({\n        \"submit #email\": function () {\n            //document.getElementById(\"test\").style.display = \"block\";\n        },\n        \"click #myBtn\": function () {\n            $(\"#myModal\").modal();\n        }\n    });\n};\n\nfunction checkLogin() {\n    var frm = document.loginForm;\n    if (frm.id.value == \"\") {\n        alert(\"아이디를 입력하세요.\");\n        frm.id.focus();\n        return false;\n    }\n    if (frm.pass.value == \"\") {\n        alert(\"비밀번호를 입력하세요.\");\n        frm.pass.focus();\n        return false;\n    }\n    // 로그인 정보 저장 체크 확인하여 진행\n    if (frm.saveid.checked) saveLogin(frm.id.value);else saveLogin(\"\");\n    frm.action = \"/member.do?method=login\";\n    frm.submit();\n}\n// 로그인 정보 저장\nfunction confirmSave(checkbox) {\n    var isRemember;\n    // 로그인 정보 저장한다고 선택할 경우\n    if (checkbox.checked) {\n        isRemember = confirm(\"이 PC에 로그인 정보를 저장하시겠습니까? \\n\\nPC방등의 공공장소에서는 개인정보가 유출될 수 있으니 주의해주십시오.\");\n        if (!isRemember) checkbox.checked = false;\n    }\n}\n// 쿠키값 가져오기\nfunction getCookie(key) {\n    var cook = document.cookie + \";\";\n    var idx = cook.indexOf(key, 0);\n    var val = \"\";\n    if (idx != -1) {\n        cook = cook.substring(idx, cook.length);\n        begin = cook.indexOf(\"=\", 0) + 1;\n        end = cook.indexOf(\";\", begin);\n        val = unescape(cook.substring(begin, end));\n    }\n    return val;\n}\n// 쿠키값 설정\nfunction setCookie(name, value, expiredays) {\n    var today = new Date();\n    today.setDate(today.getDate() + expiredays);\n    document.cookie = name + \"=\" + escape(value) + \"; path=/; expires=\" + today.toGMTString() + \";\";\n}\n// 쿠키에서 로그인 정보 가져오기\nfunction getLogin() {\n    var frm = document.loginForm;\n    // userid 쿠키에서 id 값을 가져온다.\n    var id = getCookie(\"userid\");\n    // 가져온 쿠키값이 있으면\n    if (id != \"\") {\n        frm.id.value = id;\n        frm.saveid.checked = true;\n    }\n}\n// 쿠키에 로그인 정보 저장\nfunction saveLogin(id) {\n    if (id != \"\") {\n        // userid 쿠키에 id 값을 7일간 저장\n        setCookie(\"userid\", id, 7);\n    } else {\n        // userid 쿠키 삭제\n        setCookie(\"userid\", id, -1);\n    }\n}\n\n//$(document).ready(function(){\n//    $(\"#myBtn\").click(function(){\n//        $(\"#myModal\").modal();\n//    });\n//});\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\n//var express = require('express');\n//var routes = require('./routes');\n//var user= require('./routes/user');\n//var http = require('http');\n//var path = require('path');\n//\n//var passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n//\n//// serialize\n//// 인증 후 사용자 정보를 세션에 저장\n//passport.serializeUser(function(user, done) {\n//    console.log('serialize');\n//    done(null,user);\n//});\n//\n//// deserialize\n//// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\n//passport.deserializeUser(function(user, done) {\n//    //findById(id, function (err, user) {\n//    console.log('deserialize');\n//    done(null, user);\n//});\n//\n//passport.use(new FaceBookStrategy({\n//    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n//},\n//    function(accessToken, refreshToken, profile, done) {\n//        console.log(profile);\n//        done(null,profile);\n//    }\n//));\n//var app = express();\n//\n//// all environments\n//app.set('port', process.env.PORT || 3000);\n//app.set('views', path.join(_dirname,'views'));\n//app.set('view engine', 'ejs');\n//app.use(express.favicon());\n//app.use(express.logger('dev'));\n//app.use(express.json());\n//app.use(express.urlencoded());\n//app.use(express.methodOverride());\n//app.use(express.session({ secret: 'your secret here'}));\n//app.use(passport.initialize());\n//app.use(passport.session());\n//app.use(app.router);\n//app.use(express.static(path.join(_dirname, 'public')));\n//\n//// development only\n//if('development' == app.get('env')) {\n//    app.use(exress.errorHandler());\n//}\n//\n//app.get('/auth/facebook', passport.authenticate('facebook'));\n//app.get('/auth/facebook/callback',\n//    passport.authenticate('facebook', { successRedirect: '/login_success',\n//        failureRedirect: '/login_fail' }));\n//app.get('/login_success', ensureAuthenticated, function(req, res){\n//    res.send(req.user);\n//});\n//app.get('/logout', function(req, res) {\n//    req.logout();\n//    req.redirect('/');\n//});\n//function ensureAuthenticated(req, res, next) {\n//    // 로그인이 되어 있으면, 다음 파이프라인으로 진행\n//    if (req.isAuthenticated()) { return next(); }\n//    // 로그인이 안되어 있으면, login 페이지로 진행\n//    res.redirect('/');\n//}\n//\n//http.createServer(app).listen(app.get('port'), function() {\n//    console.log('Express server listening on port ' + app.get('port'));\n//});","ast":null,"map":{"version":3,"sources":["/DescentGym.js"],"names":[],"mappings":"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","file":"/DescentGym.js.map","sourcesContent":["if (Meteor.isClient) {\n    Template.body.events({\n        \"submit #email\": function () {\n            //document.getElementById(\"test\").style.display = \"block\";\n        },\n        \"click #myBtn\": function () {\n            $(\"#myModal\").modal();\n        }\n    })\n};\n\nfunction checkLogin(){\n    var frm = document.loginForm;\n    if(frm.id.value == \"\") {\n        alert(\"아이디를 입력하세요.\");\n        frm.id.focus();\n        return false;\n    }\n    if(frm.pass.value == \"\") {\n        alert(\"비밀번호를 입력하세요.\");\n        frm.pass.focus();\n        return false;\n    }\n    // 로그인 정보 저장 체크 확인하여 진행\n    if(frm.saveid.checked) saveLogin(frm.id.value);\n    else  saveLogin(\"\");\n    frm.action = \"/member.do?method=login\";\n    frm.submit();\n}\n// 로그인 정보 저장\nfunction confirmSave(checkbox){\n    var isRemember;\n    // 로그인 정보 저장한다고 선택할 경우\n    if(checkbox.checked)  {\n        isRemember = confirm(\"이 PC에 로그인 정보를 저장하시겠습니까? \\n\\nPC방등의 공공장소에서는 개인정보가 유출될 수 있으니 주의해주십시오.\");\n        if(!isRemember)\n            checkbox.checked = false;\n    }\n}\n// 쿠키값 가져오기\nfunction getCookie(key){\n    var cook = document.cookie + \";\";\n    var idx =  cook.indexOf(key, 0);\n    var val = \"\";\n    if(idx != -1)  {\n        cook = cook.substring(idx, cook.length);\n        begin = cook.indexOf(\"=\", 0) + 1;\n        end = cook.indexOf(\";\", begin);\n        val = unescape( cook.substring(begin, end) );\n    }\n    return val;\n}\n// 쿠키값 설정\nfunction setCookie(name, value, expiredays){\n    var today = new Date();\n    today.setDate( today.getDate() + expiredays );\n    document.cookie = name + \"=\" + escape( value ) + \"; path=/; expires=\" + today.toGMTString() + \";\";\n}\n// 쿠키에서 로그인 정보 가져오기\nfunction getLogin(){\n    var frm = document.loginForm;\n    // userid 쿠키에서 id 값을 가져온다.\n    var id = getCookie(\"userid\");\n    // 가져온 쿠키값이 있으면\n    if(id != \"\") {\n        frm.id.value = id;\n        frm.saveid.checked = true;\n    }\n}\n// 쿠키에 로그인 정보 저장\nfunction saveLogin(id){\n    if(id != \"\") {\n        // userid 쿠키에 id 값을 7일간 저장\n        setCookie(\"userid\", id, 7);\n    }else{\n        // userid 쿠키 삭제\n        setCookie(\"userid\", id, -1);\n    }\n}\n\n//$(document).ready(function(){\n//    $(\"#myBtn\").click(function(){\n//        $(\"#myModal\").modal();\n//    });\n//});\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\n//var express = require('express');\n//var routes = require('./routes');\n//var user= require('./routes/user');\n//var http = require('http');\n//var path = require('path');\n//\n//var passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n//\n//// serialize\n//// 인증 후 사용자 정보를 세션에 저장\n//passport.serializeUser(function(user, done) {\n//    console.log('serialize');\n//    done(null,user);\n//});\n//\n//// deserialize\n//// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\n//passport.deserializeUser(function(user, done) {\n//    //findById(id, function (err, user) {\n//    console.log('deserialize');\n//    done(null, user);\n//});\n//\n//passport.use(new FaceBookStrategy({\n//    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n//},\n//    function(accessToken, refreshToken, profile, done) {\n//        console.log(profile);\n//        done(null,profile);\n//    }\n//));\n//var app = express();\n//\n//// all environments\n//app.set('port', process.env.PORT || 3000);\n//app.set('views', path.join(_dirname,'views'));\n//app.set('view engine', 'ejs');\n//app.use(express.favicon());\n//app.use(express.logger('dev'));\n//app.use(express.json());\n//app.use(express.urlencoded());\n//app.use(express.methodOverride());\n//app.use(express.session({ secret: 'your secret here'}));\n//app.use(passport.initialize());\n//app.use(passport.session());\n//app.use(app.router);\n//app.use(express.static(path.join(_dirname, 'public')));\n//\n//// development only\n//if('development' == app.get('env')) {\n//    app.use(exress.errorHandler());\n//}\n//\n//app.get('/auth/facebook', passport.authenticate('facebook'));\n//app.get('/auth/facebook/callback',\n//    passport.authenticate('facebook', { successRedirect: '/login_success',\n//        failureRedirect: '/login_fail' }));\n//app.get('/login_success', ensureAuthenticated, function(req, res){\n//    res.send(req.user);\n//});\n//app.get('/logout', function(req, res) {\n//    req.logout();\n//    req.redirect('/');\n//});\n//function ensureAuthenticated(req, res, next) {\n//    // 로그인이 되어 있으면, 다음 파이프라인으로 진행\n//    if (req.isAuthenticated()) { return next(); }\n//    // 로그인이 안되어 있으면, login 페이지로 진행\n//    res.redirect('/');\n//}\n//\n//http.createServer(app).listen(app.get('port'), function() {\n//    console.log('Express server listening on port ' + app.get('port'));\n//});\n"]},"hash":"780cbdd5c44e0aa9c2bda3a85d503f25e3244231"}
