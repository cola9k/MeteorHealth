{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"//if (Meteor.isClient) {\n//  Template.body.events({\n//    \"submit #email\": function () {\n//      document.getElementById(\"test\").style.display = \"block\";\n//    }\n//  })\n//}\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\nvar express = require('express');\nvar routes = require('./routes');\nvar user = require('./routes/user');\nvar http = require('http');\nvar path = require('path');\n\nvar passport = require('passport'),\n    FaceBookStrategy = require('passport-faccbook').Strategy;\n\n// serialize\n// 인증 후 사용자 정보를 세션에 저장\npassport.serializeUser(function (user, done) {\n    console.log('serialize');\n    done(null, user);\n});\n\n// deserialize\n// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\npassport.deserializeUser(function (user, done) {\n    //findById(id, function (err, user) {\n    console.log('deserialize');\n    done(null, user);\n});\n\npassport.use(new FaceBookStrategy({\n    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n}, function (accessToken, refreshToken, profile, done) {\n    console.log(profile);\n    done(null, profile);\n}));","ast":null,"map":{"version":3,"sources":["/DescentGym.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,IAAI,IAAI,GAAE,OAAO,CAAC,eAAe,CAAC,CAAC;AACnC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC;IAAE,gBAAgB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC;;;;AAI7F,QAAQ,CAAC,aAAa,CAAC,UAAS,IAAI,EAAE,IAAI,EAAE;AACxC,WAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACzB,QAAI,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC;CACnB,CAAC,CAAC;;;;AAIH,QAAQ,CAAC,eAAe,CAAC,UAAS,IAAI,EAAE,IAAI,EAAE;;AAE1C,WAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,QAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;CACpB,CAAC,CAAC;;AAEH,QAAQ,CAAC,GAAG,CAAC,IAAI,gBAAgB,CAAC;AAC9B,YAAQ,EAAE,yBAAyB;AACnC,gBAAY,EAAE,yBAAyB;AACvC,eAAW,EAAE,8CAA8C;CAC9D,EACG,UAAS,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE;AAC/C,WAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACrB,QAAI,CAAC,IAAI,EAAC,OAAO,CAAC,CAAC;CACtB,CACJ,CAAC,CAAC","file":"/DescentGym.js.map","sourcesContent":["//if (Meteor.isClient) {\n//  Template.body.events({\n//    \"submit #email\": function () {\n//      document.getElementById(\"test\").style.display = \"block\";\n//    }\n//  })\n//}\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\nvar express = require('express');\nvar routes = require('./routes');\nvar user= require('./routes/user');\nvar http = require('http');\nvar path = require('path');\n\nvar passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n\n// serialize\n// 인증 후 사용자 정보를 세션에 저장\npassport.serializeUser(function(user, done) {\n    console.log('serialize');\n    done(null,user);\n});\n\n// deserialize\n// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\npassport.deserializeUser(function(user, done) {\n    //findById(id, function (err, user) {\n    console.log('deserialize');\n    done(null, user);\n});\n\npassport.use(new FaceBookStrategy({\n    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n},\n    function(accessToken, refreshToken, profile, done) {\n        console.log(profile);\n        done(null,profile);\n    }\n));\n\n\n"]},"hash":"83edb001ee54971ab53b180f10df6461466fed07"}
