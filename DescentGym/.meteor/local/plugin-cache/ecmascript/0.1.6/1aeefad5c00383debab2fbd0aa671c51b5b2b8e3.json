{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"if (Meteor.isClient) {\n    Template.body.events({\n        \"submit form\": function (event) {\n            var userName = event.target.username.value;\n\n            console.log(userName);\n        },\n        \"click #myBtn\": function () {\n            $(\"#myModal\").modal();\n        }\n    });\n};\n//$(document).ready(function(){\n//    $(\"#myBtn\").click(function(){\n//        $(\"#myModal\").modal();\n//    });\n//});\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\n//var express = require('express');\n//var routes = require('./routes');\n//var user= require('./routes/user');\n//var http = require('http');\n//var path = require('path');\n//\n//var passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n//\n//// serialize\n//// 인증 후 사용자 정보를 세션에 저장\n//passport.serializeUser(function(user, done) {\n//    console.log('serialize');\n//    done(null,user);\n//});\n//\n//// deserialize\n//// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\n//passport.deserializeUser(function(user, done) {\n//    //findById(id, function (err, user) {\n//    console.log('deserialize');\n//    done(null, user);\n//});\n//\n//passport.use(new FaceBookStrategy({\n//    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n//},\n//    function(accessToken, refreshToken, profile, done) {\n//        console.log(profile);\n//        done(null,profile);\n//    }\n//));\n//var app = express();\n//\n//// all environments\n//app.set('port', process.env.PORT || 3000);\n//app.set('views', path.join(_dirname,'views'));\n//app.set('view engine', 'ejs');\n//app.use(express.favicon());\n//app.use(express.logger('dev'));\n//app.use(express.json());\n//app.use(express.urlencoded());\n//app.use(express.methodOverride());\n//app.use(express.session({ secret: 'your secret here'}));\n//app.use(passport.initialize());\n//app.use(passport.session());\n//app.use(app.router);\n//app.use(express.static(path.join(_dirname, 'public')));\n//\n//// development only\n//if('development' == app.get('env')) {\n//    app.use(exress.errorHandler());\n//}\n//\n//app.get('/auth/facebook', passport.authenticate('facebook'));\n//app.get('/auth/facebook/callback',\n//    passport.authenticate('facebook', { successRedirect: '/login_success',\n//        failureRedirect: '/login_fail' }));\n//app.get('/login_success', ensureAuthenticated, function(req, res){\n//    res.send(req.user);\n//});\n//app.get('/logout', function(req, res) {\n//    req.logout();\n//    req.redirect('/');\n//});\n//function ensureAuthenticated(req, res, next) {\n//    // 로그인이 되어 있으면, 다음 파이프라인으로 진행\n//    if (req.isAuthenticated()) { return next(); }\n//    // 로그인이 안되어 있으면, login 페이지로 진행\n//    res.redirect('/');\n//}\n//\n//http.createServer(app).listen(app.get('port'), function() {\n//    console.log('Express server listening on port ' + app.get('port'));\n//});","ast":null,"map":{"version":3,"sources":["/DescentGym.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,CAAC,QAAQ,EAAE;AACjB,YAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;AACjB,qBAAa,EAAE,UAAU,KAAK,EAAE;AAC5B,gBAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;;AAE3C,mBAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SACzB;AACD,sBAAc,EAAE,YAAY;AACxB,aAAC,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;SACzB;KACJ,CAAC,CAAC;CACN,CAAC","file":"/DescentGym.js.map","sourcesContent":["if (Meteor.isClient) {\n    Template.body.events({\n        \"submit form\": function (event) {\n            var userName = event.target.username.value;\n\n            console.log(userName);\n        },\n        \"click #myBtn\": function () {\n            $(\"#myModal\").modal();\n        }\n    });\n};\n//$(document).ready(function(){\n//    $(\"#myBtn\").click(function(){\n//        $(\"#myModal\").modal();\n//    });\n//});\n\n//Tasks = new Mongo.Collection(\"tasks\");\n//\n//if (Meteor.isClient) {\n//  // This code only runs on the client\n//  Template.body.helpers({\n//    tasks: function () {\n//      return Tasks.find({});\n//    }\n//  });\n//\n//  Template.body.events({\n//    \"submit .new-task\": function (event) {\n//      // Prevent default browser form submit\n//      event.preventDefault();\n//\n//      // Get value from form element\n//      var text = event.target.text.value;\n//\n//      // Insert a task into the collection\n//      Tasks.insert({\n//        text: text,\n//        createdAt: new Date(), // current time\n//        ower: Meteor.userId(),\n//        username: Meteor.user().username\n//      });\n//\n//      // Clear form\n//      event.target.text.value = \"\";\n//    },\n//    \"change .hide-completed input\": function (event) {\n//      Session.set(\"hideCompleted\", event.target.checked);\n//    }\n//  });\n//\n//  Template.body.helpers({\n//    tasks: function() {\n//      if (Session.get(\"hideCompleted\")) {\n//        return Tasks.find({checked: {$ne: true}}, {sort: {createAt: -1}});\n//      } else {\n//        return Tasks.find({},{sort: {createAT: -1}});\n//      }\n//    },\n//    hideCompleted: function () {\n//      return Session.get(\"highCompleted\");\n//    },\n//    incompleteCount: function() {\n//      return Tasks.find({checked: {$ne: true}}).count();\n//    }\n//  });\n//\n//  Template.task.events({\n//    \"click .toggle-checked\": function () {\n//      // Set the checked property to the opposite of its current value\n//      Tasks.update(this._id, {\n//        $set: {checked: ! this.checked}\n//      });\n//    },\n//    \"click .delete\": function () {\n//      Tasks.remove(this._id);\n//    }\n//  });\n//\n//  Accounts.ui.config({\n//    passwordSignupFields: \"USERNAME_ONLY\"\n//  });\n//}\n\n//var express = require('express');\n//var routes = require('./routes');\n//var user= require('./routes/user');\n//var http = require('http');\n//var path = require('path');\n//\n//var passport = require('passport'), FaceBookStrategy = require('passport-faccbook').Strategy;\n//\n//// serialize\n//// 인증 후 사용자 정보를 세션에 저장\n//passport.serializeUser(function(user, done) {\n//    console.log('serialize');\n//    done(null,user);\n//});\n//\n//// deserialize\n//// 인증후, 사용자 정보를 세션에서 읽어서 request.user에 저장\n//passport.deserializeUser(function(user, done) {\n//    //findById(id, function (err, user) {\n//    console.log('deserialize');\n//    done(null, user);\n//});\n//\n//passport.use(new FaceBookStrategy({\n//    clientID: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    clientSecret: '페이스북 개발자 사이트에서 찾아서 넣으세요',\n//    callbackURL: \"http://localhost:3000/auth/fackbook/callback\"\n//},\n//    function(accessToken, refreshToken, profile, done) {\n//        console.log(profile);\n//        done(null,profile);\n//    }\n//));\n//var app = express();\n//\n//// all environments\n//app.set('port', process.env.PORT || 3000);\n//app.set('views', path.join(_dirname,'views'));\n//app.set('view engine', 'ejs');\n//app.use(express.favicon());\n//app.use(express.logger('dev'));\n//app.use(express.json());\n//app.use(express.urlencoded());\n//app.use(express.methodOverride());\n//app.use(express.session({ secret: 'your secret here'}));\n//app.use(passport.initialize());\n//app.use(passport.session());\n//app.use(app.router);\n//app.use(express.static(path.join(_dirname, 'public')));\n//\n//// development only\n//if('development' == app.get('env')) {\n//    app.use(exress.errorHandler());\n//}\n//\n//app.get('/auth/facebook', passport.authenticate('facebook'));\n//app.get('/auth/facebook/callback',\n//    passport.authenticate('facebook', { successRedirect: '/login_success',\n//        failureRedirect: '/login_fail' }));\n//app.get('/login_success', ensureAuthenticated, function(req, res){\n//    res.send(req.user);\n//});\n//app.get('/logout', function(req, res) {\n//    req.logout();\n//    req.redirect('/');\n//});\n//function ensureAuthenticated(req, res, next) {\n//    // 로그인이 되어 있으면, 다음 파이프라인으로 진행\n//    if (req.isAuthenticated()) { return next(); }\n//    // 로그인이 안되어 있으면, login 페이지로 진행\n//    res.redirect('/');\n//}\n//\n//http.createServer(app).listen(app.get('port'), function() {\n//    console.log('Express server listening on port ' + app.get('port'));\n//});\n"]},"hash":"1aeefad5c00383debab2fbd0aa671c51b5b2b8e3"}
